<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
   <title>Willis HQ - Category: python</title>
   
   <link></link>
   <description></description>
   <language>en-us</language>
   <managingEditor>Tim Willis</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
    <item>
  <title>Piping Data into a Custom Django Management Command</title>
  <link>http://realjenius.com/blog/2014/08/26/django-command-stdin/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2014-08-26T17:25:00-05:00</pubDate>
  <guid>http://realjenius.com/blog/2014/08/26/django-command-stdin/</guid>
  <description><![CDATA[
     <p>For command line administration of a <a href="https://docs.djangoproject.com/en/dev/">django</a> site, nothing is better than <a href="https://docs.djangoproject.com/en/dev/ref/django-admin/">manage.py</a>.  It provides a single point of access for database management, development tasks, data serialization and deserialization, testing, and more.  Even better, you can write your own <a href="https://docs.djangoproject.com/en/dev/howto/custom-management-commands/">custom commands</a> and ship them with your app.  In many cases, the expected input for a manage.py command is simple.  It may be an app name or a list of model ids, which can be easily typed for a one off command, i.e.<code>python manage.py somecommand 1 2 3</code>.  This is great when you already know the input, but there are cases when you need to run one command to get the information you need for a follow up command. How can we solve that problem?</p>

<h2 id="manual-input">Manual Input</h2>

<p>One mechanism for passing information between commands is to do so manually.</p>

<p>First, let’s run a command that will give us some information from our django site.</p>

<div class="highlight"><pre><code class="language-shell-session" data-lang="shell-session"><span class="go">$ python manage.py somecommand list</span>
<span class="go">ID      Title       Date</span>
<span class="go">1       Foobar      2014-01-01 12:00</span>
<span class="go">2       Bar-foo     2014-02-10 14:41</span>
<span class="go">3       Baz         2014-05-10 08:19</span></code></pre></div>

<p>Here, there are three items listed from <code>somecommand list</code>, with IDs 1, 2, and 3.</p>

<p>Now, we can pass those IDs into another command.</p>

<div class="highlight"><pre><code class="language-shell-session" data-lang="shell-session"><span class="go">$ python manage.py somecommand sync 1 2 3</span>
<span class="go">Synced items 1, 2, 3 with master.</span></code></pre></div>

<p>This works well enough, but it’s not easily repeatable.  Perhaps we can use tools available in our unix shell to automate that step.</p>

<h2 id="piping-via-shell-commands">Piping via Shell Commands</h2>

<p>As we saw earlier, we have output from a list command that contains the item ids we need to pass into the sync command.  We just need to remove the last two columns and the header.
We can filter out the extra columns with <code>awk</code>, using <code>awk '{ print $1 }'</code> to grab only the first column.</p>

<div class="highlight"><pre><code class="language-shell-session" data-lang="shell-session"><span class="go">$ python manage.py somecommand list | awk &#39;{ print $1 }&#39;</span>
<span class="go">ID</span>
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span></code></pre></div>

<p>This is looking better, but “ID” isn’t needed.  We can remove it using <code>tail</code> - specifically <code>tail +2</code>, which will return all lines starting with the 2nd.</p>

<div class="highlight"><pre><code class="language-shell-session" data-lang="shell-session"><span class="go">$ python manage.py somecommand list | tail +2 | awk &#39;{ print $1 }&#39;</span>
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span></code></pre></div>

<p>Now, we’re ready to pass this into our <code>sync</code> command.  We could try to pipe the output of our previous command directly in, but that won’t work. The <code>sync</code> command isn’t listening to STDIN; it’s only looking for positional arguments. </p>

<div class="highlight"><pre><code class="language-shell-session" data-lang="shell-session"><span class="go">$ python manage.py somecommand list | tail +2 | awk &#39;{ print $1 }&#39; | python manage.py sync</span>
<span class="go">Nothing to sync!</span></code></pre></div>

<p>To convert our previous output to positional arguments, we can use <code>xargs</code>.</p>

<div class="highlight"><pre><code class="language-shell-session" data-lang="shell-session"><span class="go">$ python manage.py somecommand list | tail +2 | awk &#39;{ print $1 }&#39; | xargs python manage.py sync</span>
<span class="go">Synced items 1, 2, 3 with master.</span></code></pre></div>

<p>Excellent! We’ve piped the results of <code>list</code> into <code>sync</code> using a little bit of unix glue. Now, we can include this in a bash script or write an alias that will turn our one liner into a easily repeatable process.</p>

<h2 id="expecting-stdin">Expecting STDIN</h2>

<p>In the previous example, we ran into trouble trying to pipe data directly into a <code>manage.py</code> command.  We solved that problem with <code>xargs</code>, but wouldn’t it be cool if we could accept STDIN <strong>or</strong> positional arguments?</p>

<p>Reading from stdin in a <code>manage.py</code> command is fairly simple.  We import <code>sys</code> and read lines from the stdin file object as we would in any other python program.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.core.management.base</span> <span class="kn">import</span> <span class="n">BaseCommand</span><span class="p">,</span> <span class="n">CommandError</span>

<span class="k">class</span> <span class="nc">Command</span><span class="p">(</span><span class="n">BaseCommand</span><span class="p">):</span>
    <span class="n">args</span> <span class="o">=</span> <span class="s">&#39;&lt;id ...&gt;&#39;</span>

    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">):</span>
        <span class="c"># If there are no args, use stdin</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>

        <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">args</span><span class="p">:</span>
            <span class="k">print</span> <span class="n">arg</span></code></pre></div>

<p>Now, we can skip <code>xargs</code> and pipe the IDs directly into the <code>manage.py</code> command. This is interesting, but probably not worth the effort.</p>

<h2 id="expecting-stdin-with-large-datasets">Expecting STDIN with Large Datasets</h2>

<p>So far, we’ve mostly covered commands that deal with small inputs or no input.  What happens when we have a command that expects to operate on files instead of IDs?</p>

<p>Using positional arguments, this probably works about as we’d expect.  The import command will iterate through the positional arguments and import the data contained therein one at a time.</p>

<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> python manage.py somecommand import a.txt b.txt c.txt</code></pre></div>

<p>How would this work with STDIN, though?  Using the previous <code>Command</code>, we’d have to pass in filenames.</p>

<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo </span>a.txt b.txt c.txt <span class="p">|</span> python manage.py somecommand import</code></pre></div>

<p>That could be useful if we’re trying to <code>find</code> the backups we want to import, but like the previous example, it’s not really worth the effort.  What we really want to do is either pass in filenames as positional arguments or pass the files themselves via STDIN.</p>

<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> cat a.txt b.txt c.txt <span class="p">|</span> python manage.py somecommand import</code></pre></div>

<p>Fortunately, the python standard library has a module called <a href="https://docs.python.org/2/library/fileinput.html">fileinput</a> which does almost exactly that.  <a href="https://docs.python.org/2/library/fileinput.html">Fileinput</a> allows us to accept multiple input streams with the same command.  We can pass in a list of files as positional arguments or pipe the files themselves using STDIN.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">fileinput</span>

<span class="kn">from</span> <span class="nn">django.core.management.base</span> <span class="kn">import</span> <span class="n">BaseCommand</span><span class="p">,</span> <span class="n">CommandError</span>

<span class="k">class</span> <span class="nc">Command</span><span class="p">(</span><span class="n">BaseCommand</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
            <span class="k">print</span> <span class="n">line</span></code></pre></div>

<p>Now, we can do fun things like exporting production data and importing it into our local dev site.</p>

<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> ssh prodserver:/var/www/mysite python manage.py somecommand <span class="nb">export</span> <span class="p">|</span> python manage.py somecommand import</code></pre></div>

<p>Thanks for stopping by!</p>


  ]]></description>
</item>

    <item>
  <title>Breaking an iterable into chunks</title>
  <link>http://realjenius.com/blog/2014/08/22/chunky-snippet/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2014-08-22T06:42:00-05:00</pubDate>
  <guid>http://realjenius.com/blog/2014/08/22/chunky-snippet/</guid>
  <description><![CDATA[
     <p>The <a href="https://docs.python.org/2/library/itertools.html">itertools</a> library is one of my favorites in the python stdlib.  It allows you to operate on an iterable in all kinds of fun and iteresting ways.  For example, if you have a series of iterables and you’d like to loop over one after the other performing the same operation, you might normally do something like this:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">operate</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
    <span class="c">#perform some operation</span>

<span class="n">x</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">110</span><span class="p">)</span>
<span class="n">z</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">210</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">y</span><span class="p">:</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">z</span><span class="p">:</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span></code></pre></div>

<p>With <a href="https://docs.python.org/2/library/itertools.html">itertools</a>, you can do this instead:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">chain</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span></code></pre></div>

<p>For a more interesting example, let’s play FizzBuzz. The rules are as follows:</p>

<ul>
  <li>Count up from 1 saying each number</li>
  <li>If a number is divisible by 3, say Fizz instead of the number</li>
  <li>If a number is divisible by 5, say Buzz instead of the number</li>
  <li>If a number is divisible by 3 and 5, say FizzBuzz instead of the number</li>
</ul>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># Define our tests</span>
<span class="k">def</span> <span class="nf">divisible_by</span><span class="p">(</span><span class="n">divisor</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="k">except</span> <span class="p">(</span><span class="ne">ValueError</span><span class="p">,</span> <span class="ne">TypeError</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="n">divisor</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">inner</span>

<span class="n">by_3</span> <span class="o">=</span> <span class="n">divisible_by</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">by_5</span> <span class="o">=</span> <span class="n">divisible_by</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">by_15</span> <span class="o">=</span> <span class="n">divisible_by</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Replace `item` with `word` if `item` passes the `test`.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">word</span> <span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">else</span> <span class="n">item</span>
    <span class="k">return</span> <span class="n">inner</span>

<span class="n">fizz</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">by_3</span><span class="p">,</span> <span class="s">&quot;Fizz&quot;</span><span class="p">)</span>
<span class="n">buzz</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">by_5</span><span class="p">,</span> <span class="s">&quot;Buzz&quot;</span><span class="p">)</span>
<span class="n">fizzbuzz</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">by_15</span><span class="p">,</span> <span class="s">&quot;FizzBuzz&quot;</span><span class="p">)</span>

<span class="c"># Now, we can use itertools to solve the problem</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span><span class="p">,</span> <span class="n">imap</span>

<span class="n">numbers</span> <span class="o">=</span> <span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c"># this will count up forever, starting at 1</span>

<span class="n">numbers</span> <span class="o">=</span> <span class="n">imap</span><span class="p">(</span><span class="n">fizzbuzz</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
<span class="n">numbers</span> <span class="o">=</span> <span class="n">imap</span><span class="p">(</span><span class="n">fizz</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
<span class="n">numbers</span> <span class="o">=</span> <span class="n">imap</span><span class="p">(</span><span class="n">buzz</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>

<span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">number</span></code></pre></div>

<p>In additional to all the useful built in functions that <a href="https://docs.python.org/2/library/itertools.html">itertools</a> provides, there are a number of very useful <a href="https://docs.python.org/2/library/itertools.html#recipes">recipes</a> for creating your own tools.</p>

<p>One such tool is the grouper function.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">grouper</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">&quot;Collect data into fixed-length chunks or blocks&quot;</span>
    <span class="c"># grouper(&#39;ABCDEFG&#39;, 3, &#39;x&#39;) --&gt; ABC DEF Gxx</span>
    <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)]</span> <span class="o">*</span> <span class="n">n</span>
    <span class="k">return</span> <span class="n">izip_longest</span><span class="p">(</span><span class="n">fillvalue</span><span class="o">=</span><span class="n">fillvalue</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span></code></pre></div>

<p>This is great, right up until you need the last chunk to not have any filler.</p>

<p>For this, you can use <code>chunky</code>:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Take an iterable and split it into N sized chunks. If the iterable is not</span>
<span class="sd">evenly divisable by N, the final chunk will be the size of the remainder.</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>

<span class="k">def</span> <span class="nf">chunky</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Collect data into fixed-length chunks or blocks</span>
<span class="sd">    with final block truncated if the sequence is not evenly</span>
<span class="sd">    divisible by N.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="c"># chunky(&#39;ABCDEFG&#39;, 3) --&gt; ABC DEF G</span>
    <span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">sequence</span><span class="p">)</span>
    <span class="n">next_group</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">islice</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
    <span class="k">while</span> <span class="n">next_group</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">next_group</span>
        <span class="n">next_group</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">islice</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span></code></pre></div>

<p>This is useful if we have a backlog of tasks to perform, but we don’t have
the resources to perform them all at once.  We can chunk the task list and
do the work in smaller units.</p>

<p>How it looks in practice:</p>

<div class="highlight"><pre><code class="language-pycon" data-lang="pycon"><span class="gp">&gt;&gt;&gt; </span><span class="n">ten_items</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="go">[(0, 1, 2, 3, 4), (5, 6, 7, 8, 9)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="go">[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="go">[(0,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">))</span>
<span class="go">[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="go">[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]</span></code></pre></div>

<p>That’s it for now.  Thanks for stopping by!</p>


  ]]></description>
</item>


</channel>
</rss>
