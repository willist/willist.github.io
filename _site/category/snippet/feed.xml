<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
   <title>Willis HQ - Category: snippet</title>
   
   <link></link>
   <description></description>
   <language>en-us</language>
   <managingEditor>Tim Willis</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
    <item>
  <title>Breaking an iterable into chunks</title>
  <link>http://realjenius.com/blog/2014/08/22/chunky-snippet/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2014-08-22T06:42:00-05:00</pubDate>
  <guid>http://realjenius.com/blog/2014/08/22/chunky-snippet/</guid>
  <description><![CDATA[
     <p>The <a href="https://docs.python.org/2/library/itertools.html">itertools</a> library is one of my favorites in the python stdlib.  It allows you to operate on an iterable in all kinds of fun and iteresting ways.  For example, if you have a series of iterables and you’d like to loop over one after the other performing the same operation, you might normally do something like this:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">operate</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
    <span class="c">#perform some operation</span>

<span class="n">x</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">110</span><span class="p">)</span>
<span class="n">z</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">210</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">y</span><span class="p">:</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">z</span><span class="p">:</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span></code></pre></div>

<p>With <a href="https://docs.python.org/2/library/itertools.html">itertools</a>, you can do this instead:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">chain</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="n">operate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span></code></pre></div>

<p>For a more interesting example, let’s play FizzBuzz. The rules are as follows:</p>

<ul>
  <li>Count up from 1 saying each number</li>
  <li>If a number is divisible by 3, say Fizz instead of the number</li>
  <li>If a number is divisible by 5, say Buzz instead of the number</li>
  <li>If a number is divisible by 3 and 5, say FizzBuzz instead of the number</li>
</ul>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># Define our tests</span>
<span class="k">def</span> <span class="nf">divisible_by</span><span class="p">(</span><span class="n">divisor</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="k">except</span> <span class="p">(</span><span class="ne">ValueError</span><span class="p">,</span> <span class="ne">TypeError</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="n">divisor</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">inner</span>

<span class="n">by_3</span> <span class="o">=</span> <span class="n">divisible_by</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">by_5</span> <span class="o">=</span> <span class="n">divisible_by</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">by_15</span> <span class="o">=</span> <span class="n">divisible_by</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Replace `item` with `word` if `item` passes the `test`.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">word</span> <span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">else</span> <span class="n">item</span>
    <span class="k">return</span> <span class="n">inner</span>

<span class="n">fizz</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">by_3</span><span class="p">,</span> <span class="s">&quot;Fizz&quot;</span><span class="p">)</span>
<span class="n">buzz</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">by_5</span><span class="p">,</span> <span class="s">&quot;Buzz&quot;</span><span class="p">)</span>
<span class="n">fizzbuzz</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">by_15</span><span class="p">,</span> <span class="s">&quot;FizzBuzz&quot;</span><span class="p">)</span>

<span class="c"># Now, we can use itertools to solve the problem</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span><span class="p">,</span> <span class="n">imap</span>

<span class="n">numbers</span> <span class="o">=</span> <span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c"># this will count up forever, starting at 1</span>

<span class="n">numbers</span> <span class="o">=</span> <span class="n">imap</span><span class="p">(</span><span class="n">fizzbuzz</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
<span class="n">numbers</span> <span class="o">=</span> <span class="n">imap</span><span class="p">(</span><span class="n">fizz</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
<span class="n">numbers</span> <span class="o">=</span> <span class="n">imap</span><span class="p">(</span><span class="n">buzz</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>

<span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">number</span></code></pre></div>

<p>In additional to all the useful built in functions that <a href="https://docs.python.org/2/library/itertools.html">itertools</a> provides, there are a number of very useful <a href="https://docs.python.org/2/library/itertools.html#recipes">recipes</a> for creating your own tools.</p>

<p>One such tool is the grouper function.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">grouper</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">&quot;Collect data into fixed-length chunks or blocks&quot;</span>
    <span class="c"># grouper(&#39;ABCDEFG&#39;, 3, &#39;x&#39;) --&gt; ABC DEF Gxx</span>
    <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)]</span> <span class="o">*</span> <span class="n">n</span>
    <span class="k">return</span> <span class="n">izip_longest</span><span class="p">(</span><span class="n">fillvalue</span><span class="o">=</span><span class="n">fillvalue</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span></code></pre></div>

<p>This is great, right up until you need the last chunk to not have any filler.</p>

<p>For this, you can use <code>chunky</code>:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Take an iterable and split it into N sized chunks. If the iterable is not</span>
<span class="sd">evenly divisable by N, the final chunk will be the size of the remainder.</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>

<span class="k">def</span> <span class="nf">chunky</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Collect data into fixed-length chunks or blocks</span>
<span class="sd">    with final block truncated if the sequence is not evenly</span>
<span class="sd">    divisible by N.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="c"># chunky(&#39;ABCDEFG&#39;, 3) --&gt; ABC DEF G</span>
    <span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">sequence</span><span class="p">)</span>
    <span class="n">next_group</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">islice</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
    <span class="k">while</span> <span class="n">next_group</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">next_group</span>
        <span class="n">next_group</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">islice</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span></code></pre></div>

<p>This is useful if we have a backlog of tasks to perform, but we don’t have
the resources to perform them all at once.  We can chunk the task list and
do the work in smaller units.</p>

<p>How it looks in practice:</p>

<div class="highlight"><pre><code class="language-pycon" data-lang="pycon"><span class="gp">&gt;&gt;&gt; </span><span class="n">ten_items</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="go">[(0, 1, 2, 3, 4), (5, 6, 7, 8, 9)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="go">[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="go">[(0,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">))</span>
<span class="go">[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chunky</span><span class="p">(</span><span class="n">ten_items</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="go">[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]</span></code></pre></div>

<p>That’s it for now.  Thanks for stopping by!</p>


  ]]></description>
</item>


</channel>
</rss>
